
  rgb_on_red:
    alias: Turn on a given selection of lights, saving current state
    sequence:
    - data:
        store_name: flash_store
        entity_id: light.panton
      service: python_script.light_store
    - data:
        entity_id: light.panton
        brightness: 151
        rgb_color:
        - 255
        - 0
        - 0
      service: light.turn_on
  rgb_restore:
    alias: Restore saved lights to the way they were
    sequence:
    - data:
        store_name: flash_store
        operation: restore
      service: python_script.light_store


  mockupancy:
    sequence:
      # Wait until it is after 4pm and dark to start the routine
      - wait_template: "{{ states.sensor.time.state >= '16:00' and is_state('binary_sensor.dark_outside' , 'on') }}"

      # Check that it Extended Away mode is still on
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'

      # Pick a random bedtime between 10pm and midnight.
      - service: input_datetime.set_time
        data_template:
          entity_id: input_datetime.mockupancy_bedtime
          time: "{{ (range(22, 23)|random|int) }}:{{ (range(0, 59)|random|int) }}:00"

      # Start the routine, switch on the 'usual' lights
      - service: homeassistant.turn_on
        entity_id:
          - scene.tvrum_tvmys
          - scene.finrum

      # Start scripts to randomise occasional lights
      - service: script.random_sovrum
      - service: script.random_kok

      # 1 hour before bedtime, change lighting as if TV was turned off
      - wait_template: "{{ states('sensor.time') == (((state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')) - (60 * 60))|timestamp_custom('%H:%M', false)) }}"
      - service: homeassistant.turn_on
        entity_id:
          - scene.tvrum_pyssel

      # 20 minutes before bedtime, turn on kitchen lights only
      - wait_template: "{{ states('sensor.time') == (((state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')) - (20 * 60))|timestamp_custom('%H:%M', false)) }}"
      - service: homeassistant.turn_on
        entity_id:
          - scene.natt_ljus

      # Stop kitchen/master bedroom randomisation
      - service: homeassistant.turn_off
        entity_id:
          - script.random_sovrum
          - script.random_sovrum_loop
          - script.random_kok
          - script.random_kok_loop

      # At 'bedtime', turn on Master Bedroom for random time between 2 and 15 minutes
      # turn off kitchen, wait 20-30 seconds, turn off living room wait 30-59 seconds,
      # turn on bedroom.
      - wait_template: "{{ states('sensor.time') == (state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')|int|timestamp_custom('%H:%M', False)) }}"
      - service: homeassistant.turn_on
        entity_id: light.skapet
      - delay: "00:00:{{ (range(15, 59)|random|int) }}"
      - service: homeassistant.turn_off
        entity_id: light.skena_over_soffa
      - delay: "00:00:{{ (range(20, 30)|random|int) }}"
      - service: homeassistant.turn_off
        entity_id: light.skena_i_finrum
      - delay: "00:00{{ (range(20, 30)|random|int) }}"
      - service: homeassistant.turn_on
        entity_id: light.garderoben
        data:
          brightness: 80
      - delay: "00:{{ (range(2, 15)|random|int) }}:00"
      - service: homeassistant.turn_off
        entity_id: light.skapet
      - delay: "00:{{ (range(15, 59)|random|int) }}:00"
      - service: homeassistant.turn_off
        entity_id: light.garderoben

  #    # After a random time between 15 minutes and an hour, turn off the lights
  #    - delay: "00:{{ (range(15, 30)|random|int) }}:00"
  #     - service: input_boolean.turn_on
  #      entity_id: input_boolean.goodnight_switch

      # If light before 7am, switch off lights, stop and loop, if not run a further script first
  #    - wait_template: "{{ now().hour == 7 }}"
      - wait_template: "{{ states.sensor.time.state == '07:00' }}"
      - service_template: >
          {% if states('binary_sensor.dark_outside' , 'on') %} script.morning_mockupancy
          {% else %} script.mockupancy_loop {% endif %}


  # A further script for if it is still dark in the morning
  morning_mockupancy:
    sequence:
      # Check that it Extended Away mode is still on
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'

      # Wait a random nmber of minutes between 1 and 30 and switch on the morning lights
      - delay: "00:{{ (range(1, 30)|random|int) }}:00"
      - service: homeassistant.turn_on
        entity_id: scene.morning_lighting

      # Wait until it is light, switch off lights and loop
      - wait_template: "{{ is_state('binary_sensor.dark_outside' , 'off') }}"
      - service: script.mockupancy_loop


  # Randomising rooms we're in and out off
  random_sovrum:
    sequence:
      # Check that it Extended Away mode is still on
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'

      # Wait a random nmber of minutes between 15 and 90 and switch on
      - delay: "00:{{ (range(15, 90)|random|int) }}:00"
      - service: homeassistant.turn_on
        entity_id: light.garderoben
        data:
          brightness: 100

      # Wait for between 3 minutes and 9 minutes and switch off
      - delay: "00:{{ (range(3, 9)|random|int) }}:00"
      - service: homeassistant.turn_off
        entity_id: light.garderoben

      # Loop the script for next time.
      - service: script.random_sovrum_loop


  random_kok:
    sequence:
      # Check that it Extended Away mode is still on
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'

      # Wait a random nmber of minutes between 15 and 90 and switch on
      - delay: "00:{{ (range(15, 90)|random|int) }}:00"
      - service: homeassistant.turn_on
        entity_id: light.koksbordet
        data:
          brightness: 100

      # Wait for between 3 minutes and 9 minutes and switch off
      - delay: "00:{{ (range(3, 9)|random|int) }}:00"
      - service: homeassistant.turn_off
        entity_id: light.koksbordet

      # Loop the script for next time.
      - service: script.random_kok_loop


  # Scripts that loop the ones above that need looping
  mockupancy_loop:
    sequence:
      # Switch off the lights, and make sure the calling scripts have stopped
      - service: homeassistant.turn_off
        entity_id:
          - group.all_lights
          - script.mockupancy
      - delay: 00:05:00

      # Check that it Extended Away mode is still on and restart the script for a new day
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'
      - service: script.mockupancy

  random_sovrum_loop:
    sequence:
      # Stop the calling script
      - service: homeassistant.turn_off
        entity_id: script.random_sovrum
      - delay: 00:05:00

      # Check that Extended Away mode is on and restart the script
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'
      - service: script.random_sovrum

  random_kok_loop:
    sequence:
      # Stop the calling script
      - service: homeassistant.turn_off
        entity_id: script.random_kitchen
      - delay: 00:05:00

      # Check that Extended Away mode is on and restart the script
      - condition: state
        entity_id: input_select.house_mode
        state: 'Extended Away'
      - service: script.random_kitchen
